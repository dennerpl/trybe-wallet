{"ast":null,"code":"// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport initialState from './initialState';\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isLoading: false,\n  controlId: 0,\n  rates: {}\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        expenses: [...state.expenses, action.expense]\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        currencies: [...Object.keys(action.payload).map(key => action.payload[key])]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default walletReducer;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/trybe-wallet/sd-07-project-trybewallet/src/reducers/wallet.js"],"names":["initialState","INITIAL_STATE","currencies","expenses","isLoading","controlId","rates","walletReducer","state","action","type","expense","Object","keys","payload","map","key"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,EADQ;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,SAAS,EAAE,KAHS;AAIpBC,EAAAA,SAAS,EAAE,CAJS;AAKpBC,EAAAA,KAAK,EAAE;AALa,CAAtB;;AAQA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGP,aAAT,EAAwBQ,MAAxB,KAAmC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAK,QAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYL,QAAAA,QAAQ,EAAE,CAAC,GAAGK,KAAK,CAACL,QAAV,EAAoBM,MAAM,CAACE,OAA3B;AAAtB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYN,QAAAA,UAAU,EAAE,CAAC,GAAGU,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACK,OAAnB,EAA4BC,GAA5B,CAAiCC,GAAD,IAASP,MAAM,CAACK,OAAP,CAAeE,GAAf,CAAzC,CAAJ;AAAxB,OAAP;;AACF;AACE,aAAOR,KAAP;AANF;AAQD,CATD;;AAWA,eAAeD,aAAf","sourcesContent":["// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport initialState from './initialState';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isLoading: false,\n  controlId: 0,\n  rates: {},\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'CHANGE':\n    return { ...state, expenses: [...state.expenses, action.expense] };\n  case 'FETCH_SUCCESS':\n    return { ...state, currencies: [...Object.keys(action.payload).map((key) => action.payload[key])] };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n"]},"metadata":{},"sourceType":"module"}