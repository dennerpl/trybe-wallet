{"version":3,"sources":["pages/Login.js","actions/index.js","components/ExpenseForm.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/initialState.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Login","state","email","password","disabled","handleChange","bind","buttonValidation","handleSubmit","this","e","test","length","setState","event","target","name","value","props","login","history","push","htmlFor","data-testid","placeholder","id","type","onChange","onClick","React","Component","mapDispatchToProps","connect","ExpenseForm","expense","description","method","currency","tag","loadCurrencies","preventDefault","expenses","addExpenses","exchangeRates","console","log","resetState","currencies","style","marginLeft","filter","filterCurrency","codein","map","currencyInfo","index","key","code","wallet","dispatch","a","fetch","data","json","payload","Table","renderElements","deleteExpense","parseFloat","ask","toFixed","actions","Wallet","Adicione","o","atributo","user","total","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","isLoading","walletReducer","Object","keys","i","combineReducers","store","createStore","Reducers","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57ee9070.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.buttonValidation = this.buttonValidation.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  buttonValidation() {\n    const { email } = this.state;\n    const { password } = this.state;\n    const e = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n      email,\n    );\n    const compareNumber = 5;\n    if ((password.length > compareNumber) && (e)) {\n      this.setState({\n        disabled: false,\n      });\n    } else {\n      this.setState({\n        disabled: true,\n      });\n    }\n  }\n\n  handleChange(event) {\n    const { target } = event;\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, this.buttonValidation);\n  }\n\n  handleSubmit() {\n    const { login, history } = this.props;\n    const { email } = this.state;\n    login(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password, disabled } = this.state;\n    return (\n      <div>\n        <form>\n          <label htmlFor=\"email\">\n            Email\n            <div>\n              <input\n                name=\"email\"\n                data-testid=\"email-input\"\n                placeholder=\"Digite seu email\"\n                id=\"email\"\n                type=\"text\"\n                value={ email }\n                onChange={ this.handleChange }\n              />\n            </div>\n          </label>\n          {' '}\n          <label htmlFor=\"password\">\n            Senha\n            <div>\n              <input\n                name=\"password\"\n                data-testid=\"password-input\"\n                placeholder=\"Digite sua senha\"\n                id=\"password\"\n                type=\"text\"\n                value={ password }\n                onChange={ this.handleChange }\n              />\n            </div>\n          </label>\n          {' '}\n          <button type=\"button\" disabled={ disabled } onClick={ this.handleSubmit }>\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   user: email,\n// });\n\nconst mapDispatchToProps = {\n  login: actions.changeEmail,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  login: PropTypes.func.isRequired,\n};\n","export const changeEmail = (email) => ({\n  type: 'LOGIN',\n  email,\n});\n\nexport const addExpenses = (expenses) => ({\n  type: 'CHANGE',\n  expenses,\n});\n\nexport const deleteExpense = (id) => ({\n  type: 'DELETE',\n  id,\n});\n\nexport const chargeCurrencies = (currencies) => ({\n  type: 'CURRENCIES',\n  currencies,\n});\n\nconst fetchSuccess = (currencies) => ({\n  type: 'FETCH_SUCCESS',\n  payload: {\n    ...currencies,\n  },\n});\n\nexport function fetchCurrencies() {\n  return async (dispatch) => {\n    const data = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const json = await data.json();\n    return dispatch(fetchSuccess(json));\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nclass ExpenseForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expense: [],\n      value: '',\n      description: '',\n      method: '',\n      currency: '',\n      tag: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { loadCurrencies } = this.props;\n    // this.setState({\n    //   isLoading: true,\n    // }, async () => {\n    //   const data = loadCurrencies();\n    //   this.setState({\n    //     moedas: [data]\n    //   })\n    // })\n    loadCurrencies();\n  }\n\n  handleChange(event) {\n    const { target } = event;\n    const { name, value } = target;\n    this.setState(\n      {\n        [name]: value,\n      },\n      this.buttonValidation,\n    );\n  }\n\n  resetState() {\n    this.setState({\n      expense: [],\n      value: '',\n      description: '',\n      method: '',\n      currency: '',\n      tag: '',\n    });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { expenses, addExpenses, loadCurrencies, exchangeRates } = this.props;\n    const { value, description, method, currency, tag } = this.state;\n    await loadCurrencies();\n    console.log(exchangeRates);\n    // const { currencies } = this.props;\n    // const filteredCurrencies = currencies\n    //   .filter((filterCurrency) => filterCurrency.codein != \"BRLT\")\n    //   .sort();\n    this.setState({\n      expense: {\n        id: expenses.length,\n        value,\n        currency,\n        description,\n        method,\n        tag,\n        exchangeRates,\n      },\n    });\n    const { expense } = this.state;\n    addExpenses(expense);\n    this.resetState();\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <div>\n        <form>\n          <label htmlFor=\"value\">\n            Valor da despesa\n            <div>\n              <input\n                name=\"value\"\n                data-testid=\"value-input\"\n                placeholder=\"Digite seu despesa\"\n                id=\"value\"\n                type=\"text\"\n                value={ value }\n                onChange={ this.handleChange }\n              />\n            </div>\n          </label>\n          {' '}\n          <label htmlFor=\"description\">\n            O que é?\n            <div>\n              <input\n                name=\"description\"\n                data-testid=\"description-input\"\n                placeholder=\"Descrição da despesa\"\n                id=\"description\"\n                type=\"text\"\n                value={ description }\n                onChange={ this.handleChange }\n              />\n            </div>\n          </label>\n          {' '}\n          <label htmlFor=\"currency-input\" data-testid=\"currency-input-label\">\n            Sigla\n            <select\n              style={ { marginLeft: 10 } }\n              name=\"currency\"\n              onChange={ this.handleChange }\n              id=\"currency-input\"\n              data-testid=\"currency-input\"\n              value={ currency }\n            >\n              {currencies\n                .filter((filterCurrency) => filterCurrency.codein !== 'BRLT')\n                .map((currencyInfo, index) => (\n                  <option\n                    key={ index }\n                    value={ currencyInfo.code }\n                    data-testid={ currencyInfo.code }\n                  >\n                    {currencyInfo.code}\n                  </option>\n                ))}\n            </select>\n          </label>\n          <label htmlFor=\"method-input\" data-testid=\"method-input-label\">\n            Forma de pagamento\n            <select\n              style={ { marginLeft: 10 } }\n              name=\"method\"\n              onChange={ this.handleChange }\n              id=\"method-input\"\n              data-testid=\"method-input\"\n              value={ method }\n            >\n              <option value=\"Dinheiro\" data-testid=\"method-option\">\n                Dinheiro\n              </option>\n              <option value=\"Cartão de crédito\" data-testid=\"method-option\">\n                Cartão de crédito\n              </option>\n              <option value=\"Cartão de débito\" data-testid=\"method-option\">\n                Cartão de débito\n              </option>\n            </select>\n          </label>\n          <label htmlFor=\"tag-input\" data-testid=\"tag-input-label\">\n            Categoria\n            <select\n              style={ { marginLeft: 10 } }\n              name=\"tag\"\n              onChange={ this.handleChange }\n              id=\"tag-input\"\n              data-testid=\"tag-input\"\n              value={ tag }\n            >\n              <option value=\"Alimentação\" data-testid=\"tag-option\">\n                Alimentação\n              </option>\n              <option value=\"Lazer\" data-testid=\"tag-option\">\n                Lazer\n              </option>\n              <option value=\"Trabalho\" data-testid=\"tag-option\">\n                Trabalho\n              </option>\n              <option value=\"Transporte\" data-testid=\"tag-option\">\n                Transporte\n              </option>\n              <option value=\"Saúde\" data-testid=\"tag-option\">\n                Saúde\n              </option>\n            </select>\n          </label>\n          <button type=\"button\" onClick={ this.handleSubmit }>\n            Adicionar despesa\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  exchangeRates: state.wallet.exchangeRates,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadCurrencies: () => dispatch(actions.fetchCurrencies()),\n  addExpenses: (expense) => dispatch(actions.addExpenses(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForm);\n\nExpenseForm.propTypes = {\n  loadCurrencies: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addExpenses: PropTypes.func.isRequired,\n  exchangeRates: PropTypes.objectOf(PropTypes.object).isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n// Base da tabela de Brenda Lima\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderElements = this.renderElements.bind(this);\n  }\n\n  renderElements(expense) {\n    const { description, tag, method, value, exchangeRates, currency, id } = expense;\n    const { deleteExpense } = this.props;\n    return (\n      <tr key={ description }>\n        <td>{ description }</td>\n        <td>{ tag }</td>\n        <td>{ method }</td>\n        <td>{ value }</td>\n        <td>{ exchangeRates[currency].name }</td>\n        <td>{ parseFloat(exchangeRates[currency].ask).toFixed(2) }</td>\n        <td>{ parseFloat(value) * parseFloat(exchangeRates[currency].ask) }</td>\n        <td>Real</td>\n        <td>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            onClick={ () => deleteExpense(id) }\n          >\n            Deletar\n          </button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            { expenses.map((expense) => this.renderElements(expense)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(actions.deleteExpense(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ExpenseForm from '../components/ExpenseForm';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  render() {\n    const { email } = this.props;\n    return (\n      <div>\n        <header>\n          <section>\n            Bem vindo\n            <p data-testid=\"email-field\">{email}</p>\n          </section>\n          <section>\n            Gastos totais R$\n            <p Adicione o atributo data-testid=\"total-field\">\n              {0}\n            </p>\n          </section>\n          <section>\n            Seus gastos estão sendo convertidos para\n            {' '}\n            <p data-testid=\"header-currency-field\">BRL</p>\n          </section>\n        </header>\n        <ExpenseForm />\n        <Table />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  total: state.wallet.total,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import initialState from './initialState';\n\nconst INITIAL_STATE = initialState.user;\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'LOGIN':\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","export default {\n  user: {\n    email: '',\n  },\n  wallet: {\n    currencies: [],\n    expenses: [],\n    loading: false,\n  },\n};\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n  isLoading: false,\n  exchangeRates: {},\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'CHANGE':\n    action.expenses.id = state.expenses.length;\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n      total:\n          state.total\n          + parseFloat(action.expenses.value)\n            * parseFloat(\n              action.expenses.exchangeRates[action.expenses.currency].ask,\n            ),\n    };\n  case 'FETCH_SUCCESS':\n    // const keys = Object.keys(action.payload);\n    // const values = Object.values(action.payload);\n    // const arrayResult = []\n    // keys.map((teste, index) => {\n    //   const object = {teste: values[index]};\n    //   arrayResult[index] = object;\n    // })\n    return {\n      ...state,\n      currencies: Object.keys(action.payload).map((i) => action.payload[i]),\n      exchangeRates: action.payload,\n    };\n  case 'DELETE':\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.id),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\n\nimport user from './user';\nimport wallet from './wallet';\n\nexport default combineReducers({\n  user,\n  wallet,\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport Reducers from '../reducers';\n\nconst store = createStore(Reducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}